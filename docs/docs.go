// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag at
// 2019-09-06 17:44:17.5817582 +0800 CST m=+0.314787201

package docs

import (
	"bytes"
	"encoding/json"

	"github.com/alecthomas/template"
	"github.com/swaggo/swag"
)

var doc = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{.Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "license": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/v1/classic/latest": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Classic"
                ],
                "summary": "获取最新期刊",
                "parameters": [
                    {
                        "type": "string",
                        "description": "x-auth-token",
                        "name": "x-auth-token",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{\"content\": \"人生不能像做菜，把所有的料准备好才下锅\",\"favnums\": 0,\"id\": 7,\"image\": \"images/movie.8.png\",\"index\": 8,\"like_status\": true,\"pubdate\": \"2019-04-05T17:12:04+08:00\",\"title\": \"李安《饮食男女 》\",\"type\": 100}",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/service.Response"
                        }
                    }
                }
            }
        },
        "/v1/user/register": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "邮箱方式注册用户",
                "parameters": [
                    {
                        "description": "邮箱方式注册用户",
                        "name": "service",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/model.RegisterRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/model.CreateResponse"
                        }
                    }
                }
            }
        },
        "/v1/user/token": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "获取token",
                "parameters": [
                    {
                        "description": "token",
                        "name": "token",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/model.TokenRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{\"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE1Njc3Njk4MDYsImlhdCI6MTU2Nzc2MjYwNiwiaWQiOjEsIm5iZiI6MTU2Nzc2MjYwNiwic2NvcGUiOjh9.-VlL6oAa8mMD2Wd0Os1in1V5T9sdcwv6OCupihZKZNY\"}",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/model.Token"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "model.CreateResponse": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "nickname": {
                    "type": "string"
                }
            }
        },
        "model.RegisterRequest": {
            "type": "object",
            "required": [
                "email",
                "nickname",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "nickname": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "model.Token": {
            "type": "object",
            "properties": {
                "token": {
                    "type": "string"
                }
            }
        },
        "model.TokenRequest": {
            "type": "object",
            "required": [
                "account"
            ],
            "properties": {
                "account": {
                    "type": "string"
                },
                "secret": {
                    "type": "string"
                },
                "type": {
                    "type": "integer"
                }
            }
        },
        "service.Response": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "data": {
                    "type": "object"
                },
                "message": {
                    "type": "string"
                }
            }
        }
    }
}`

type swaggerInfo struct {
	Version     string
	Host        string
	BasePath    string
	Schemes     []string
	Title       string
	Description string
}

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = swaggerInfo{ Schemes: []string{}}

type s struct{}

func (s *s) ReadDoc() string {
	t, err := template.New("swagger_info").Funcs(template.FuncMap{
		"marshal": func(v interface {}) string {
			a, _ := json.Marshal(v)
			return string(a)
		},
	}).Parse(doc)
	if err != nil {
		return doc
	}

	var tpl bytes.Buffer
	if err := t.Execute(&tpl, SwaggerInfo); err != nil {
		return doc
	}

	return tpl.String()
}

func init() {
	swag.Register(swag.Name, &s{})
}
