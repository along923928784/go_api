package server

import (
	"net/http"

	"github.com/gin-gonic/gin"
	ginSwagger "github.com/swaggo/gin-swagger"
	"github.com/swaggo/gin-swagger/swaggerFiles"
	_ "jiyue.im/docs" // docs is generated by Swag CLI, you have to import it.
	"jiyue.im/pkg/auth"
	"jiyue.im/server/middleware"
	"jiyue.im/service"
)

func LoadRouter(mw ...gin.HandlerFunc) *gin.Engine {
	g := gin.New()

	if gin.Mode() == "debug" {
		g.Use(gin.Logger())
	}
	g.Use(gin.Recovery())
	g.Use(mw...)

	// 404 Handler.
	g.NoRoute(func(c *gin.Context) {
		c.JSON(http.StatusNotFound, gin.H{
			"你访问的页面不存在": "XXXXXXXXXXXXXXXXX",
		})
	})

	g.GET("/swagger/*any", ginSwagger.WrapHandler(swaggerFiles.Handler))

	ping(g)

	u := g.Group("/v1/user")
	{
		u.POST("/register", service.UserRegister)
		u.POST("/token", service.GetToken)
		u.POST("/token/verify", middleware.AuthMiddleware(auth.USER), service.VerifyToken)
	}

	classic := g.Group("/v1/classic")
	classic.Use(middleware.AuthMiddleware(auth.USER))
	{
		classic.GET("/latest", service.GetLatest)
		classic.GET("/next/:id", service.ClassicNext)
		classic.GET("/previous/:id", service.ClassicPrevious)
		classic.GET("/favor/:type/:id", service.ClassicFavor)
		classic.GET("/favors", service.ClassicFavors)
		classic.GET("/detail/:type/:id", service.ClassicDetail)
	}

	like := g.Group("/v1/like")
	like.Use(middleware.AuthMiddleware(auth.USER))
	{
		like.POST("/", service.Like)
		like.POST("/cancel", service.DisLike)
	}

	return g
}

func ping(g *gin.Engine) {
	g.GET("/ping", service.HealthCheck)
}
